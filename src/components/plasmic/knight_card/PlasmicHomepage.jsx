// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fBQJDH7PU5FGNVtvQedmDg
// Component: NIZi8Hse93sQY
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: nlfm8NUj2v054/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Button from "../../Button"; // plasmic-import: wQ8nuIXbn5TIi/component
import Footer from "../../Footer"; // plasmic-import: -Lfs3sivO2_2k/component
import { useScreenVariants as useScreenVariantsteWoHrXp1ORco } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: teWOHrXP1oRco/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_knight_card.module.css"; // plasmic-import: fBQJDH7PU5FGNVtvQedmDg/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: NIZi8Hse93sQY/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsteWoHrXp1ORco()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          {true ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <p.Stack
                as={"section"}
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                hasGap={true}
                className={classNames(projectcss.all, sty.section)}
              >
                <Reveal
                  big={true}
                  className={classNames("__wab_instance", sty.reveal__fKnAe)}
                  direction={"down"}
                  duration={7000}
                  effect={"fade"}
                  triggerOnce={true}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Knight Card"}
                  </h1>
                </Reveal>

                <Reveal
                  big={true}
                  cascade={false}
                  className={classNames("__wab_instance", sty.reveal__njbdj)}
                  delay={7000}
                  duration={2000}
                  effect={"fade"}
                  triggerOnce={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bGMz
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"Make your car "}</React.Fragment>
                      {
                        <a
                          data-plasmic-name={"link"}
                          data-plasmic-override={overrides.link}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link
                          )}
                          href={"https://www.youtube.com/watch?v=uO8yFLF9uhM"}
                          target={"_blank"}
                        >
                          {"indestructible"}
                        </a>
                      }

                      <React.Fragment>{"."}</React.Fragment>
                    </React.Fragment>
                  </div>
                </Reveal>
              </p.Stack>

              <Reveal
                className={classNames("__wab_instance", sty.reveal__sbBP)}
                delay={8000}
                effect={"rotate"}
                triggerOnce={true}
              >
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  link={`/dashboard`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cVNq
                    )}
                  >
                    {"Go to app"}
                  </div>
                </Button>
              </Reveal>

              <div
                data-plasmic-name={"tv"}
                data-plasmic-override={overrides.tv}
                className={classNames(projectcss.all, sty.tv)}
              />
            </div>
          ) : null}

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "freeBox",
    "section",
    "h1",
    "link",
    "button",
    "tv",
    "footer"
  ],

  header: ["header"],
  freeBox: ["freeBox", "section", "h1", "link", "button", "tv"],
  section: ["section", "h1", "link"],
  h1: ["h1"],
  link: ["link"],
  button: ["button"],
  tv: ["tv"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    freeBox: makeNodeComponent("freeBox"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    link: makeNodeComponent("link"),
    button: makeNodeComponent("button"),
    tv: makeNodeComponent("tv"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/4a3f4516bad734748f72a69f6ae35d66.png",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
