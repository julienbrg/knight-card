// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fBQJDH7PU5FGNVtvQedmDg
// Component: nlfm8NUj2v054
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: wQ8nuIXbn5TIi/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_knight_card.module.css"; // plasmic-import: fBQJDH7PU5FGNVtvQedmDg/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: nlfm8NUj2v054/css

export const PlasmicHeader__VariantProps = new Array();

export const PlasmicHeader__ArgProps = new Array();

function PlasmicHeader__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ev8TM)}
      >
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox___0T55U)}>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__nyzkB
              )}
              href={`/`}
            >
              {"Knight Card"}
            </a>
          </div>
        ) : null}
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__b8D7Z)}
      >
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__skWti)}>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__zcX7X
              )}
              href={`/dashboard`}
            >
              {"App"}
            </a>
          </div>
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__bg3G)}>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__hns5R
              )}
              href={`/about`}
            >
              {"About"}
            </a>
          </div>
        ) : null}

        <Button
          data-plasmic-name={"check"}
          data-plasmic-override={overrides.check}
          className={classNames("__wab_instance", sty.check)}
          color={"blue"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__htbF
            )}
          >
            {"Check"}
          </div>
        </Button>

        <Button
          data-plasmic-name={"login"}
          data-plasmic-override={overrides.login}
          className={classNames("__wab_instance", sty.login)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__g2QGr
            )}
          >
            {"Login"}
          </div>
        </Button>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "check", "login"],
  check: ["check"],
  login: ["login"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    check: makeNodeComponent("check"),
    login: makeNodeComponent("login"),
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
